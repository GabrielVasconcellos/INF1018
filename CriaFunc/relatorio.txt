Bernardo Florindo Mortari Rezende 	1811441 	3WA
Gabriel Luiz Neves de Vasconcellos 	1810542 	3WA

O programa CriaFunc possui as seguintes funcionalidades testadas: 

[1]Repassagem de parâmetros:
[1.1]Tipo inteiro;
[1.2]Tipo ponteiro;

[2]Amarrar valores pré-determinados:
[2.1]Tipo inteiro constante;
[2.2]Tipo ponteiro constante;
[2.3]Tipo inteiro contido em uma varíavel;
[2.4]Tipo ponteiro contido em uma varíavel.

Foram utilizados exemplos do site e alguns criados por nós.

Exemplos de uso:
Exemplo 1(inclui as funcionalidades [1.1] e [2.1]):

#include <stdio.h>
#include "cria_func.h"

typedef int (*func_ptr) (int x);

int mult(int x, int y) {
  return x * y;
}

int main (void) {
  DescParam params[2];
  func_ptr f_mult;
  int i;

  params[0].tipo_val = INT_PAR; /* o primeiro parãmetro de mult é int */
  params[0].orig_val = PARAM;   /* a nova função repassa seu parämetro */

  params[1].tipo_val = INT_PAR; /* o segundo parâmetro de mult é int */
  params[1].orig_val = FIX;     /* a nova função passa para mult a constante 10 */
  params[1].valor.v_int = 10;

  f_mult = (func_ptr) cria_func (mult, params, 2);

  for (i = 1; i <=10; i++) {
    printf("%d\n", f_mult(i)); /* a nova função só recebe um argumento */
  }

  libera_func(f_mult);
  return 0;
}

Output 1:
10
20
30
40
50
60
70
80
90
100

Exemplo 2(inclui as funcionalides [2.1] e [2.3]):

#include <stdio.h>
#include "cria_func.h"

typedef int (*func_ptr) ();

int mult(int x, int y) {
  return x * y;
}

int main (void) {
  DescParam params[2];
  func_ptr f_mult;
  int i;

  params[0].tipo_val = INT_PAR; /* a nova função passa para mult um valor inteiro */
  params[0].orig_val = IND;     /* que é o valor corrente da variavel i */
  params[0].valor.v_ptr = &i;

  params[1].tipo_val = INT_PAR; /* o segundo argumento passado para mult é a constante 10 */
  params[1].orig_val = FIX;
  params[1].valor.v_int = 10;

  f_mult = (func_ptr) cria_func (mult, params, 2);

  for (i = 1; i <=10; i++) {
    printf("%d\n", f_mult()); /* a nova função não recebe argumentos */
  }

  libera_func(f_mult);
  return 0;
}

Output 2:
10
20
30
40
50
60
70
80
90
100

Exemplo 3(inclui as funcionalidades [1.1], [1.2] e [2.2]):

#include <stdio.h>
#include <string.h>
#include "cria_func.h"

typedef int (*func_ptr) (void* candidata, size_t n);

char fixa[] = "quero saber se a outra string é um prefixo dessa";

int main (void) {
  DescParam params[3];
  func_ptr mesmo_prefixo;
  char s[] = "quero saber tudo";
  int tam;

  params[0].tipo_val = PTR_PAR; /* o primeiro parâmetro de memcmp é um ponteiro para char */
  params[0].orig_val = FIX;     /* a nova função passa para memcmp o endereço da string "fixa" */
  params[0].valor.v_ptr = fixa;

  params[1].tipo_val = PTR_PAR; /* o segundo parâmetro de memcmp é também um ponteiro para char */
  params[1].orig_val = PARAM;   /* a nova função recebe esse ponteiro e repassa para memcmp */

  params[2].tipo_val = INT_PAR; /* o terceiro parâmetro de memcmp é um inteiro */
  params[2].orig_val = PARAM;   /* a nova função recebe esse inteiro e repassa para memcmp */

  mesmo_prefixo = (func_ptr) cria_func (memcmp, params, 3);

  tam = 12;
  printf ("'%s' tem mesmo prefixo-%d de '%s'? %s\n", s, tam, fixa, mesmo_prefixo (s, tam)?"NAO":"SIM");
  tam = strlen(s);
  printf ("'%s' tem mesmo prefixo-%d de '%s'? %s\n", s, tam, fixa, mesmo_prefixo (s, tam)?"NAO":"SIM");

  libera_func(mesmo_prefixo);
  return 0;
}

Output 3:

'quero saber tudo' tem mesmo prefixo-12 de 'quero saber se a outra string é um prefixo dessa'? SIM
'quero saber tudo' tem mesmo prefixo-16 de 'quero saber se a outra string é um prefixo dessa'? NAO

Exemplo 4(inclui as funcionalidades [1.1], [2.3] e [2.4]):

Multiplica o array contido no ponteiro duplo amarrado "multArray" pelo valor da variável amarrada "mult"

#include <stdio.h>
#include <stdlib.h>
#include "cria_func.h"
#define NULLCHECK(x); if (x == NULL) exit(1);
#define TAM 10

typedef void (*func_ptr) (int);

void mult_array (int **array, int mult, int n)
{
  int i, *inc = *array;

  for (i = 0; i < n; i++)
    inc[i] *= mult;
}

void printa_multArray (int **multArray, int n)
{
  int i, j;
  for (i = 0; i < n; i++)
  {
    for (j = 0; j < n; j++)
      printf("%d\t", multArray[i][j]);
    printf("\n");
  }
  printf("\n");
}

int **make_multArray(int n)
{
  int i, j;
  int **mat = malloc(sizeof(int *) * n);
  NULLCHECK(mat);
  for (i = 0; i < n; i++)
  {
    mat[i] = malloc(sizeof(int) * n);
    NULLCHECK(mat[i]);
  }
  for (i = 0; i < n; i++)
  {
    for(j = 0; j < n; j++)
      mat[i][j] = j+1;
  }
  return mat;
}

int main (void) {
  DescParam params[3];
  func_ptr f_mult_array;
  int i;
  int mult = 1; 
  int **multArray = make_multArray(TAM);
  int **iter = multArray;

  params[0].tipo_val = PTR_PAR;
  params[0].orig_val = IND;
  params[0].valor.v_ptr = &iter;

  params[1].tipo_val = INT_PAR;
  params[1].orig_val = IND;
  params[1].valor.v_ptr = &mult;

  params[2].tipo_val = INT_PAR;
  params[2].orig_val = PARAM;

  f_mult_array = (func_ptr) cria_func(mult_array, params, 3);

  printf("Antes:\n");
  printa_multArray(multArray, TAM);
  for (i = 0; i < TAM; i++, mult++,  iter++)
    f_mult_array(TAM);
  printf("\nDepois:\n");
  printa_multArray(multArray, TAM);

  libera_func(f_mult_array);
  return 0;
}

Output 4:
Antes:
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	
1	2	3	4	5	6	7	8	9	10	


Depois:
1	2	3	4	5	6	7	8	9	10	
2	4	6	8	10	12	14	16	18	20	
3	6	9	12	15	18	21	24	27	30	
4	8	12	16	20	24	28	32	36	40	
5	10	15	20	25	30	35	40	45	50	
6	12	18	24	30	36	42	48	54	60	
7	14	21	28	35	42	49	56	63	70	
8	16	24	32	40	48	56	64	72	80	
9	18	27	36	45	54	63	72	81	90	
10	20	30	40	50	60	70	80	90	100	